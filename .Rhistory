waist$date = as.Date(waist$date)
library(mgcv)
waistM <- lm(waist ~ as.numeric(date), data=waist)
waistM <- gam(waist ~ s(as.numeric(date), k=3), data=waist)
waistPred <- data.frame(date = as.Date(seq(min(waist$date), max(waist$date), len=50)))
waistPred <- cbind(waistPred, as.data.frame(predict(waistM, newdata=waistPred, se.fit=TRUE)))
colorGrad <- colorRamp(c("#ff00ff", "#ffdf00", "#0f263d"))
pdf("/home/timothy/Dropbox/Tim/data/claire/waistPlot.pdf",
height=3.5, width=6)
par(mar=c(1.5,3,0.5,0.5), mgp=c(3,0.5,0), tcl=-0.25, ps=10, las=1)
plot(waist$waist ~ waist$date, xlim=c(18924, 18950), ylim=c(70,100),
type="n", xlab="", ylab="")
abline(h=80, lty="31")
mtext(side=2, line=1.75, las=0, text="Waist circumference (cm)")
yGrad <- seq(80, par("usr")[4], len=200)
image(y=yGrad,
x=c(par("usr")[1], par("usr")[2]),
z=matrix(200:1, ncol=200), add=TRUE, useRaster=TRUE,
col=rgb(colorGrad(seq(0,1,len=200))/255))
rect(xleft=par("usr")[1], xright=min(waistPred$date),
ybottom=par('usr')[3], ytop=par("usr")[4], border="white", col="white")
rect(xleft=par("usr")[2], xright=max(waistPred$date),
ybottom=par('usr')[3], ytop=par("usr")[4], border="white", col="white")
polygon(x=c(waistPred$date, max(waistPred$date), min(waistPred$date)),
y=c(waistPred$fit + 1.96 * waistPred$se.fit, par("usr")[4], par("usr")[4]),
border="white", col="white")
polygon(x=c(waistPred$date, max(waistPred$date), min(waistPred$date)),
y=c(waistPred$fit - 1.96 * waistPred$se.fit, par("usr")[3], par("usr")[3]),
border="white", col="white")
abline(h=80, lwd=2, col=rgb(colorGrad(1-(80 - min(yGrad)) / (max(yGrad) - min(yGrad)))/255),
lty="31")
text(y=80, x=par("usr")[2]-1, pos=3, labels="Goal",
col=rgb(colorGrad(1-(80 - min(yGrad)) / (max(yGrad) - min(yGrad)))/255), offset=0.25, font=2)
breadrgb <- col2rgb("#BE9962")/255
with(waist[waist$carbDays=="Y",], rect(xleft=date-0.65, xright=date+0.65,
ybottom=par("usr")[3], ytop=par('usr')[4],
border=NA, col=rgb(breadrgb[1],breadrgb[2],
breadrgb[3],0.75)))
with(waist[waist$carbDays=="Y",], text(x=date, y=par("usr")[3]+0.5, col="#6d3200",
srt=90, labels="CARB DAY", font=2, cex=1.75, adj=0))
polygon(x=c(waistPred$date, rev(waistPred$date)),
y=c(waistPred$fit - 1.96 * waistPred$se.fit,
rev(waistPred$fit + 1.96 * waistPred$se.fit)),
border="white", col=rgb(1,1,1,0.5))
sapply(2:nrow(waist), function(n){
segments(x0=waist$date[n-1],
x1=waist$date[n],
y0=waist$waist[n-1],
y1=waist$waist[n],
col=rgb(colorGrad(1-(waist$waist - min(yGrad)) / (max(yGrad) - min(yGrad)))/255))
})
lines(waistPred$fit ~ waistPred$date, lwd=2)
points(waist$waist ~ waist$date, pch=21,
bg=rgb(colorGrad(1-(waist$waist - min(yGrad)) / (max(yGrad) - min(yGrad)))/255))
box()
dev.off()
waist <- read.csv("/home/timothy/Dropbox/Tim/data/claire/data.csv")
waist$date = as.Date(waist$date)
library(mgcv)
waistM <- lm(waist ~ as.numeric(date), data=waist)
waistM <- gam(waist ~ s(as.numeric(date), k=3), data=waist)
waistPred <- data.frame(date = as.Date(seq(min(waist$date), max(waist$date), len=50)))
waistPred <- cbind(waistPred, as.data.frame(predict(waistM, newdata=waistPred, se.fit=TRUE)))
colorGrad <- colorRamp(c("#ff00ff", "#ffdf00", "#0f263d"))
pdf("/home/timothy/Dropbox/Tim/data/claire/waistPlot.pdf",
height=3.5, width=6)
par(mar=c(1.5,3,0.5,0.5), mgp=c(3,0.5,0), tcl=-0.25, ps=10, las=1)
plot(waist$waist ~ waist$date, xlim=c(18924, 18950), ylim=c(70,100),
type="n", xlab="", ylab="")
abline(h=80, lty="31")
mtext(side=2, line=1.75, las=0, text="Waist circumference (cm)")
yGrad <- seq(80, par("usr")[4], len=200)
image(y=yGrad,
x=c(par("usr")[1], par("usr")[2]),
z=matrix(200:1, ncol=200), add=TRUE, useRaster=TRUE,
col=rgb(colorGrad(seq(0,1,len=200))/255))
rect(xleft=par("usr")[1], xright=min(waistPred$date),
ybottom=par('usr')[3], ytop=par("usr")[4], border="white", col="white")
rect(xleft=par("usr")[2], xright=max(waistPred$date),
ybottom=par('usr')[3], ytop=par("usr")[4], border="white", col="white")
polygon(x=c(waistPred$date, max(waistPred$date), min(waistPred$date)),
y=c(waistPred$fit + 1.96 * waistPred$se.fit, par("usr")[4], par("usr")[4]),
border="white", col="white")
polygon(x=c(waistPred$date, max(waistPred$date), min(waistPred$date)),
y=c(waistPred$fit - 1.96 * waistPred$se.fit, par("usr")[3], par("usr")[3]),
border="white", col="white")
abline(h=80, lwd=2, col=rgb(colorGrad(1-(80 - min(yGrad)) / (max(yGrad) - min(yGrad)))/255),
lty="31")
text(y=80, x=par("usr")[2]-1, pos=3, labels="Goal",
col=rgb(colorGrad(1-(80 - min(yGrad)) / (max(yGrad) - min(yGrad)))/255), offset=0.25, font=2)
breadrgb <- col2rgb("#BE9962")/255
with(waist[waist$carbDays=="Y",], rect(xleft=date-0.65, xright=date+0.65,
ybottom=par("usr")[3], ytop=par('usr')[4],
border=NA, col=rgb(breadrgb[1],breadrgb[2],
breadrgb[3],0.75)))
with(waist[waist$carbDays=="Y",], text(x=date, y=par("usr")[3]+0.5, col="#6d3200",
srt=90, labels="CARB DAY", font=2, cex=1.75, adj=0))
polygon(x=c(waistPred$date, rev(waistPred$date)),
y=c(waistPred$fit - 1.96 * waistPred$se.fit,
rev(waistPred$fit + 1.96 * waistPred$se.fit)),
border="white", col=rgb(1,1,1,0.5))
sapply(2:nrow(waist), function(n){
segments(x0=waist$date[n-1],
x1=waist$date[n],
y0=waist$waist[n-1],
y1=waist$waist[n],
col=rgb(colorGrad(1-(waist$waist[n-1] - min(yGrad)) / (max(yGrad) - min(yGrad)))/255))
})
lines(waistPred$fit ~ waistPred$date, lwd=2)
points(waist$waist ~ waist$date, pch=21,
bg=rgb(colorGrad(1-(waist$waist - min(yGrad)) / (max(yGrad) - min(yGrad)))/255))
box()
dev.off()
waist <- read.csv("/home/timothy/Dropbox/Tim/data/claire/data.csv")
waist$date = as.Date(waist$date)
library(mgcv)
waistM <- lm(waist ~ as.numeric(date), data=waist)
waistM <- gam(waist ~ s(as.numeric(date), k=3), data=waist)
waistPred <- data.frame(date = as.Date(seq(min(waist$date), max(waist$date), len=50)))
waistPred <- cbind(waistPred, as.data.frame(predict(waistM, newdata=waistPred, se.fit=TRUE)))
colorGrad <- colorRamp(c("#ff00ff", "#ffdf00", "#0f263d"))
pdf("/home/timothy/Dropbox/Tim/data/claire/waistPlot.pdf",
height=3.5, width=6)
par(mar=c(1.5,3,0.5,0.5), mgp=c(3,0.5,0), tcl=-0.25, ps=10, las=1)
plot(waist$waist ~ waist$date, xlim=c(18924, 18950), ylim=c(70,100),
type="n", xlab="", ylab="")
abline(h=80, lty="31")
mtext(side=2, line=1.75, las=0, text="Waist circumference (cm)")
yGrad <- seq(80, par("usr")[4], len=200)
image(y=yGrad,
x=c(par("usr")[1], par("usr")[2]),
z=matrix(200:1, ncol=200), add=TRUE, useRaster=TRUE,
col=rgb(colorGrad(seq(0,1,len=200))/255))
rect(xleft=par("usr")[1], xright=min(waistPred$date),
ybottom=par('usr')[3], ytop=par("usr")[4], border="white", col="white")
rect(xleft=par("usr")[2], xright=max(waistPred$date),
ybottom=par('usr')[3], ytop=par("usr")[4], border="white", col="white")
polygon(x=c(waistPred$date, max(waistPred$date), min(waistPred$date)),
y=c(waistPred$fit + 1.96 * waistPred$se.fit, par("usr")[4], par("usr")[4]),
border="white", col="white")
polygon(x=c(waistPred$date, max(waistPred$date), min(waistPred$date)),
y=c(waistPred$fit - 1.96 * waistPred$se.fit, par("usr")[3], par("usr")[3]),
border="white", col="white")
abline(h=80, lwd=2, col=rgb(colorGrad(1-(80 - min(yGrad)) / (max(yGrad) - min(yGrad)))/255),
lty="31")
text(y=80, x=par("usr")[2]-1, pos=3, labels="Goal",
col=rgb(colorGrad(1-(80 - min(yGrad)) / (max(yGrad) - min(yGrad)))/255), offset=0.25, font=2)
breadrgb <- col2rgb("#BE9962")/255
with(waist[waist$carbDays=="Y",], rect(xleft=date-0.65, xright=date+0.65,
ybottom=par("usr")[3], ytop=par('usr')[4],
border=NA, col=rgb(breadrgb[1],breadrgb[2],
breadrgb[3],0.75)))
with(waist[waist$carbDays=="Y",], text(x=date, y=par("usr")[3]+0.5, col="#6d3200",
srt=90, labels="CARB DAY", font=2, cex=1.75, adj=0))
polygon(x=c(waistPred$date, rev(waistPred$date)),
y=c(waistPred$fit - 1.96 * waistPred$se.fit,
rev(waistPred$fit + 1.96 * waistPred$se.fit)),
border="white", col=rgb(1,1,1,0.5))
sapply(2:nrow(waist), function(n){
segments(x0=waist$date[n-1],
x1=waist$date[n],
y0=waist$waist[n-1],
y1=waist$waist[n],
col="black")
})
lines(waistPred$fit ~ waistPred$date, lwd=2)
points(waist$waist ~ waist$date, pch=21,
bg=rgb(colorGrad(1-(waist$waist - min(yGrad)) / (max(yGrad) - min(yGrad)))/255))
box()
dev.off()
rm(list=ls())
library(readxl)
library(d3r)
library(jsonlite)
setwd("/home/timothy/Dropbox/Tim/CV/collabNetwork")
myName = "Timothy L. Staples"
myPapers <- read.csv("wos2.csv", stringsAsFactors = FALSE)
myCoAuth <- sort(unique(unlist(strsplit(myPapers$Author.Full.Names, "; ",))))
paste0("AU = (", paste0(myCoAuth, collapse = ") OR ("), ")")
# cycle through wos subfolder to import 500 paper blocks
wosFiles <- list.files(path="./wos", include.dirs=TRUE, pattern=".xls")
coAuthPapers <- do.call("rbind", lapply(1:length(wosFiles), function(n){
temp <- as.data.frame(read_excel(paste0("./wos/", wosFiles[n])),
stringAsFactors=FALSE)
authorList <- strsplit(temp$`Author Full Names`, "; ")
do.call("rbind", lapply(1:length(authorList), function(n1){
data.frame(auth = authorList[[n1]],
pID = ((n-1)*500) + n1,
pubYear = temp$`Publication Year`[n1])
}))
}))
coAuthPapers$surname <- substr(coAuthPapers$auth,
1, regexpr(", ", coAuthPapers$auth)-1)
coAuthPapers$first <- substr(coAuthPapers$auth,
regexpr(", ", coAuthPapers$auth)+2,
nchar(as.character(coAuthPapers$auth)))
coAuthPapers$full <- paste0(coAuthPapers$first, " ", coAuthPapers$surname)
# make "me" the year of publication
head(coAuthPapers)
# now make a co-author table, only including my co-authors
coAuthPapers <- droplevels(coAuthPapers[coAuthPapers$auth %in% myCoAuth,])
# now make me a year
myPubYears <- sort(unique(coAuthPapers$pubYear[coAuthPapers$full  %in% c(myName, "Timothy Staples")]))
coAuthPapers$full[coAuthPapers$full %in% c(myName, "Timothy Staples")] = coAuthPapers$pubYear[coAuthPapers$full  %in% c(myName, "Timothy Staples")]
coAuthMat <- do.call("rbind",
tapply(coAuthPapers$full,
coAuthPapers$pID,
function(x){expand.grid(x, x)}, simplify=FALSE))
coAuthMat <- table(coAuthMat$Var1, coAuthMat$Var2)
aTab <- data.frame(source = rep(rownames(coAuthMat), ncol(coAuthMat)),
target = rep(colnames(coAuthMat), each=nrow(coAuthMat)),
count=as.vector(coAuthMat), stringsAsFactors = FALSE)
for(n in 1:(length(myPubYears)-1)){
aTab$count[aTab$source %in% myPubYears[n] &
aTab$target %in% myPubYears[n+1]] = 1
}
aTab <- aTab[aTab$source != aTab$target,]
aTab <- aTab[aTab$count > 0,]
aTab$primary <- ifelse((aTab$source %in% myPubYears | aTab$target %in% myPubYears),
"#324158", "#8C96A6")
aTab$width <- ifelse(aTab$source %in% myPubYears | aTab$target %in% myPubYears, 2, 0.5)
aTab$width[aTab$source %in% myPubYears & aTab$target %in% myPubYears] = 7.5
countWithMe <- sapply(split(aTab, f=aTab$target), function(x){
if(x$target %in% myPubYears){return(4)}
sum(x$count[x$source %in% c(myPubYears)])
})
# convert table into graph
library(igraph)
network=graph_from_data_frame(d=aTab, directed=F)
V(network)$count = countWithMe[match(V(network)$name, names(countWithMe))]
V(network)$count <- ifelse(V(network)$count == 0, 5, 3.5*V(network)$count)
# V(network)$count[V(network)$name == myName] = 15
V(network)$primary = "#324158"
V(network)$primary[V(network)$name %in% myPubYears] = "white"
V(network)$label = V(network)$name
V(network)$shadow = "rgb(255, 255, 255) 2px 0px 0px, rgb(255, 255, 255) 1.75517px 0.958851px 0px, rgb(255, 255, 255) 1.0806px 1.68294px 0px, rgb(255, 255, 255) 0.141474px 1.99499px 0px, rgb(255, 255, 255) -0.832294px 1.81859px 0px, rgb(255, 255, 255) -1.60229px 1.19694px 0px, rgb(255, 255, 255) -1.97999px 0.28224px 0px, rgb(255, 255, 255) -1.87291px -0.701566px 0px, rgb(255, 255, 255) -1.30729px -1.51361px 0px, rgb(255, 255, 255) -0.421592px -1.95506px 0px, rgb(255, 255, 255) 0.567324px -1.91785px 0px, rgb(255, 255, 255) 1.41734px -1.41108px 0px, rgb(255, 255, 255) 1.92034px -0.558831px 0px"
V(network)$shadow[V(network)$name %in% myPubYears] = "rgb(50, 65, 88) 2px 0px 0px, rgb(50, 65, 88) 1.75517px 0.958851px 0px, rgb(50, 65, 88) 1.0806px 1.68294px 0px, rgb(50, 65, 88) 0.141474px 1.99499px 0px, rgb(50, 65, 88) -0.832294px 1.81859px 0px, rgb(50, 65, 88) -1.60229px 1.19694px 0px, rgb(50, 65, 88) -1.97999px 0.28224px 0px, rgb(50, 65, 88) -1.87291px -0.701566px 0px, rgb(50, 65, 88) -1.30729px -1.51361px 0px, rgb(50, 65, 88) -0.421592px -1.95506px 0px, rgb(50, 65, 88) 0.567324px -1.91785px 0px, rgb(50, 65, 88) 1.41734px -1.41108px 0px, rgb(50, 65, 88) 1.92034px -0.558831px 0px"
# add coordinates for each year
yearVs <- !is.na(as.numeric(V(network)$name))
yearYs <- seq(-length(yearVs), length(yearVs), len=sum(yearVs))
V(network)$cat = 0
V(network)$cat[yearVs] = yearYs
V(network)$catStrength = as.numeric(yearVs)
url <- read.csv("url.csv")
V(network)$url = NA
V(network)$url[match(url$name,
V(network)$name)] = as.character(url$url)
V(network)$hasurl <- !is.na(V(network)$url)
V(network)$offlabel = V(network)$name
V(network)$offlabel[V(network)$name %in% myCoAuth]=""
V(network)$offlabel[match(url$name,
V(network)$name)]= as.character(url$label)
V(network)$width = 0
V(network)$width[V(network)$name %in% myPubYears] = 5
V(network)$strokeCol = "#324158"
V(network)$strokeCol[V(network)$name %in% myPubYears] = "#324158"
# Transform it in a JSON format for d3.js
data_json <- d3_igraph(network)
# Save this file
write(data_json, "/home/timothy/Dropbox/Tim/CV/collabNetwork/data.json")
plot(network)
myPapers
# now make me a year
myPubYears <- sort(unique(coAuthPapers$pubYear[coAuthPapers$full  %in% c(myName, "Timothy Staples")]))
myPubYears
coAuthPapers$full
unique(coAuthPapers$full)
setwd("/home/timothy/Dropbox/Tim/CV/collabNetwork")
myName = "Timothy L. Staples"
myPapers <- read.csv("wos2.csv", stringsAsFactors = FALSE)
myCoAuth <- sort(unique(unlist(strsplit(myPapers$Author.Full.Names, "; ",))))
paste0("AU = (", paste0(myCoAuth, collapse = ") OR ("), ")")
# cycle through wos subfolder to import 500 paper blocks
wosFiles <- list.files(path="./wos", include.dirs=TRUE, pattern=".xls")
coAuthPapers <- do.call("rbind", lapply(1:length(wosFiles), function(n){
temp <- as.data.frame(read_excel(paste0("./wos/", wosFiles[n])),
stringAsFactors=FALSE)
authorList <- strsplit(temp$`Author Full Names`, "; ")
do.call("rbind", lapply(1:length(authorList), function(n1){
data.frame(auth = authorList[[n1]],
pID = ((n-1)*500) + n1,
pubYear = temp$`Publication Year`[n1])
}))
}))
coAuthPapers$surname <- substr(coAuthPapers$auth,
1, regexpr(", ", coAuthPapers$auth)-1)
coAuthPapers$first <- substr(coAuthPapers$auth,
regexpr(", ", coAuthPapers$auth)+2,
nchar(as.character(coAuthPapers$auth)))
coAuthPapers$full <- paste0(coAuthPapers$first, " ", coAuthPapers$surname)
# make "me" the year of publication
head(coAuthPapers)
table(coAuthPapers$auth)
sort(table(coAuthPapers$auth), decreasing=TRUE)
coAuthPapers <- droplevels(coAuthPapers[coAuthPapers$auth %in% myCoAuth,])
coAuthPapers
table(coAuthPapers$auth)
myCoAuth
coAuthPapers <- do.call("rbind", lapply(1:length(wosFiles), function(n){
temp <- as.data.frame(read_excel(paste0("./wos/", wosFiles[n])),
stringAsFactors=FALSE)
authorList <- strsplit(temp$`Author Full Names`, "; ")
do.call("rbind", lapply(1:length(authorList), function(n1){
data.frame(auth = authorList[[n1]],
pID = ((n-1)*500) + n1,
pubYear = temp$`Publication Year`[n1])
}))
}))
coAuthPapers$surname <- substr(coAuthPapers$auth,
1, regexpr(", ", coAuthPapers$auth)-1)
coAuthPapers$first <- substr(coAuthPapers$auth,
regexpr(", ", coAuthPapers$auth)+2,
nchar(as.character(coAuthPapers$auth)))
coAuthPapers$full <- paste0(coAuthPapers$first, " ", coAuthPapers$surname)
# make "me" the year of publication
head(coAuthPapers)
myCoAuth
coAuthPapers[coAuthPapers$full  %in% c(myName, "Timothy Staples")],]
coAuthPapers[coAuthPapers$full  %in% c(myName, "Timothy Staples"),]
myPapers <- read.csv("wos2.csv", stringsAsFactors = FALSE)
myCoAuth <- sort(unique(unlist(strsplit(myPapers$Author.Full.Names, "; ",))))
paste0("AU = (", paste0(myCoAuth, collapse = ") OR ("), ")")
rm(list=ls())
library(readxl)
library(d3r)
library(jsonlite)
setwd("/home/timothy/Dropbox/Tim/CV/collabNetwork")
myName = "Timothy L. Staples"
myPapers <- read.csv("wos2.csv", stringsAsFactors = FALSE)
myCoAuth <- sort(unique(unlist(strsplit(myPapers$Author.Full.Names, "; ",))))
paste0("AU = (", paste0(myCoAuth, collapse = ") OR ("), ")")
# cycle through wos subfolder to import 500 paper blocks
wosFiles <- list.files(path="./wos", include.dirs=TRUE, pattern=".xls")
coAuthPapers <- do.call("rbind", lapply(1:length(wosFiles), function(n){
temp <- as.data.frame(read_excel(paste0("./wos/", wosFiles[n])),
stringAsFactors=FALSE)
authorList <- strsplit(temp$`Author Full Names`, "; ")
do.call("rbind", lapply(1:length(authorList), function(n1){
data.frame(auth = authorList[[n1]],
pID = ((n-1)*500) + n1,
pubYear = temp$`Publication Year`[n1])
}))
}))
coAuthPapers$surname <- substr(coAuthPapers$auth,
1, regexpr(", ", coAuthPapers$auth)-1)
coAuthPapers$first <- substr(coAuthPapers$auth,
regexpr(", ", coAuthPapers$auth)+2,
nchar(as.character(coAuthPapers$auth)))
coAuthPapers$full <- paste0(coAuthPapers$first, " ", coAuthPapers$surname)
# make "me" the year of publication
head(coAuthPapers)
# now make a co-author table, only including my co-authors
coAuthPapers <- droplevels(coAuthPapers[coAuthPapers$auth %in% myCoAuth,])
coAuthPapers[coAuthPapers$full  %in% c(myName, "Timothy Staples"),]
# now make me a year
myPubYears <- sort(unique(coAuthPapers$pubYear[coAuthPapers$full  %in% c(myName, "Timothy Staples")]))
coAuthPapers$full[coAuthPapers$full %in% c(myName, "Timothy Staples")] = coAuthPapers$pubYear[coAuthPapers$full  %in% c(myName, "Timothy Staples")]
coAuthMat <- do.call("rbind",
tapply(coAuthPapers$full,
coAuthPapers$pID,
function(x){expand.grid(x, x)}, simplify=FALSE))
coAuthMat <- table(coAuthMat$Var1, coAuthMat$Var2)
aTab <- data.frame(source = rep(rownames(coAuthMat), ncol(coAuthMat)),
target = rep(colnames(coAuthMat), each=nrow(coAuthMat)),
count=as.vector(coAuthMat), stringsAsFactors = FALSE)
for(n in 1:(length(myPubYears)-1)){
aTab$count[aTab$source %in% myPubYears[n] &
aTab$target %in% myPubYears[n+1]] = 1
}
aTab <- aTab[aTab$source != aTab$target,]
aTab <- aTab[aTab$count > 0,]
aTab$primary <- ifelse((aTab$source %in% myPubYears | aTab$target %in% myPubYears),
"#324158", "#8C96A6")
aTab$width <- ifelse(aTab$source %in% myPubYears | aTab$target %in% myPubYears, 2, 0.5)
aTab$width[aTab$source %in% myPubYears & aTab$target %in% myPubYears] = 7.5
countWithMe <- sapply(split(aTab, f=aTab$target), function(x){
if(x$target %in% myPubYears){return(4)}
sum(x$count[x$source %in% c(myPubYears)])
})
# convert table into graph
library(igraph)
network=graph_from_data_frame(d=aTab, directed=F)
V(network)$count = countWithMe[match(V(network)$name, names(countWithMe))]
V(network)$count <- ifelse(V(network)$count == 0, 5, 3.5*V(network)$count)
# V(network)$count[V(network)$name == myName] = 15
V(network)$primary = "#324158"
V(network)$primary[V(network)$name %in% myPubYears] = "white"
V(network)$label = V(network)$name
V(network)$shadow = "rgb(255, 255, 255) 2px 0px 0px, rgb(255, 255, 255) 1.75517px 0.958851px 0px, rgb(255, 255, 255) 1.0806px 1.68294px 0px, rgb(255, 255, 255) 0.141474px 1.99499px 0px, rgb(255, 255, 255) -0.832294px 1.81859px 0px, rgb(255, 255, 255) -1.60229px 1.19694px 0px, rgb(255, 255, 255) -1.97999px 0.28224px 0px, rgb(255, 255, 255) -1.87291px -0.701566px 0px, rgb(255, 255, 255) -1.30729px -1.51361px 0px, rgb(255, 255, 255) -0.421592px -1.95506px 0px, rgb(255, 255, 255) 0.567324px -1.91785px 0px, rgb(255, 255, 255) 1.41734px -1.41108px 0px, rgb(255, 255, 255) 1.92034px -0.558831px 0px"
V(network)$shadow[V(network)$name %in% myPubYears] = "rgb(50, 65, 88) 2px 0px 0px, rgb(50, 65, 88) 1.75517px 0.958851px 0px, rgb(50, 65, 88) 1.0806px 1.68294px 0px, rgb(50, 65, 88) 0.141474px 1.99499px 0px, rgb(50, 65, 88) -0.832294px 1.81859px 0px, rgb(50, 65, 88) -1.60229px 1.19694px 0px, rgb(50, 65, 88) -1.97999px 0.28224px 0px, rgb(50, 65, 88) -1.87291px -0.701566px 0px, rgb(50, 65, 88) -1.30729px -1.51361px 0px, rgb(50, 65, 88) -0.421592px -1.95506px 0px, rgb(50, 65, 88) 0.567324px -1.91785px 0px, rgb(50, 65, 88) 1.41734px -1.41108px 0px, rgb(50, 65, 88) 1.92034px -0.558831px 0px"
# add coordinates for each year
yearVs <- !is.na(as.numeric(V(network)$name))
yearYs <- seq(-length(yearVs), length(yearVs), len=sum(yearVs))
V(network)$cat = 0
V(network)$cat[yearVs] = yearYs
V(network)$catStrength = as.numeric(yearVs)
url <- read.csv("url.csv")
V(network)$url = NA
V(network)$url[match(url$name,
V(network)$name)] = as.character(url$url)
V(network)$hasurl <- !is.na(V(network)$url)
V(network)$offlabel = V(network)$name
V(network)$offlabel[V(network)$name %in% myCoAuth]=""
V(network)$offlabel[match(url$name,
V(network)$name)]= as.character(url$label)
V(network)$width = 0
V(network)$width[V(network)$name %in% myPubYears] = 5
V(network)$strokeCol = "#324158"
V(network)$strokeCol[V(network)$name %in% myPubYears] = "#324158"
# Transform it in a JSON format for d3.js
data_json <- d3_igraph(network)
# Save this file
write(data_json, "/home/timothy/Dropbox/Tim/CV/collabNetwork/data.json")
# trying to plumb Google Scholar (API keeps thinking I'm a bot :()
#
#
# install.packages("devtools")
# install.packages("d3r")
#
# library(devtools)
# install_github("jkeirstead/scholar")
# library(scholar)
#
# # start by finding your ID
# myName <- "Timothy L Staples"
#
# myID <- get_scholar_id(last_name = "Staples",
#                        first_name = "Timothy",
#                        affiliation = NA)
#
# # now get your publications
# myPubs <- get_publications(id=myID, sortby="year", pagesize=100)
#
# # sort through your papers to get full author lists
# myCoA <- get_complete_authors(id = myID, pubid = myPubs$pubid, initials = FALSE)
# myCoAinit <- get_complete_authors(id = myID, pubid = myPubs$pubid, initials = TRUE)
#
# myCoAsave <- myCoA
# myCoAinitsave <- myCoAinit
# # split these into separate strings
# myCoAv <- unlist(strsplit(myCoA, ", "))
# myCoAinit <- unlist(strsplit(myCoAinit, ", "))
# myCoAvunique <- myCoAv[!duplicated(myCoAinit)]
#
# myCoAsur <- substr(myCoAvunique,
#                    sapply(gregexpr(" ", myCoAvunique), function(x){rev(x)[1]})+1,
#                    nchar(myCoAvunique))
# myCoAfirst <- substr(myCoAvunique, 1,
#                      sapply(gregexpr(" ", myCoAvunique), function(x){rev(x)[1]})-1)
#
# # now cycle through each co-author, looking first for an initialled profile,
# # and then for non-initialled
# n<-5
# aTab <- do.call("rbind", lapply(1:length(myCoAvunique), function(n){
#
#   Asur <- myCoAsur[n]
#   Afirst <- myCoAfirst[n]
#   print(paste0("Looking for... ", paste(Afirst, Asur)))
#
#   # this function seems to need both first and last names to find stuff
#
#   Aid <- try(get_scholar_id(first_name = Afirst,
#                             last_name = Asur),
#              silent=TRUE)
#
#   # try removing initials
#   if(class(Aid) == "try-error" & !grepl(" ", Afirst)){
#     print("...No Scholar ID")
#     return(NULL)
#   }
#
#   if(class(Aid) == "try-error" & grepl(" ", Afirst)){
#     Aid = try(get_scholar_id(first_name = substr(Afirst, 1, regexpr(" ", Afirst)-1),
#                              last_name = Asur),
#               silent=TRUE)
#   }
#
#   if(class(Aid) == "try-error"){
#     print("...No Scholar ID")
#     return(NULL)
#   }
#
#   # get all paper Ids from authors (the 100 most recent). This sometimes
#   # fails if there's too many for an author (might be a workaround to loop
#   # through slowly)
#   APubs <- try(get_publications(id=Aid, sortby="year", pagesize=10, flush=TRUE),
#                silent=TRUE)
#
#   if(class(APubs) == "try-error"){
#     print("...author has too many papers!")
#     return(NULL)
#   }
#
#   # now get unique list of authors, only keeping them if they're in your
#   # coauthor list (we need to keep the network reasonably sized somehow!)
#   AcoA <- get_complete_authors(id=Aid, pubid=APubs$pubid, initials = FALSE)
#   AcoAinit <- get_complete_authors(id=Aid, pubid=APubs$pubid, initials = TRUE)
#
#   # match co-authors to my co-authors
#   ACoAv <- unlist(strsplit(AcoA, ", "))
#   ACoAinit <- unlist(strsplit(AcoAinit, ", "))
#   ACoAv <- ACoAv[ACoAv %in% myCoAv]
#
#   # make a table, removing self-references and references to me
#   ACoTab <- as.data.frame(table(ACoAv))
#   ACoTab <- ACoTab[!ACoTab[,1] %in% c(paste(Afirst, Asur), myName),]
#   ACoTab$A <- paste(Afirst, Asur)
#
#   return(ACoTab)
#
# }))
plot(network)
